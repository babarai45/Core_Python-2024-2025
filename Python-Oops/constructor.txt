=======================================================================================================
                                            Python-Consuctor 
=======================================================================================================



1.  What is Python Constructor?
2.  Types of Python Constructor
3. whrere to use Python Constructor
4. why to use Python Constructor
5. what is benifit of Python Constructor
6.  Python Constructor Overloading
7.  Python Constructor Overriding
8.  Python Constructor with Inheritance
9.  What is self in Python Constructor?
======================================================================================================

======================================================================================================
1.  What is Python Constructor?
======================================================================================================
=>  Constructor is a special type of method which is used to initialize the instance members of the class.
=>  Constructor in Python is used to assign values to the object properties when an object is created.
=>  It is called when an object is created. 
=>  It is used to initialize the object.
=>  It is called automatically when an object is created.
=>  It is defined with the __init__() method.
=>  It is also known as magic method.
=>  It is used to initialize the object.

Syntax:
    def __init__(self):
        # body of the constructor

=>  The __init__() method is called the constructor in Python. It is called when an object is created.
=>  self is a reference to the current instance of the class, and is used to access variables that belongs to the class.
=>  It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class.

Example:
    class Student:
        def __init__(self):
            print("Constructor is called")
            
    s1 = Student()

Output:
    Constructor is called

======================================================================================================

======================================================================================================
2.  Types of Python Constructor
======================================================================================================
=>  There are two types of Python Constructor:
    1.  Default Constructor
    2.  Parameterized Constructor
    
======================================================================================================
2.1 Default Constructor
======================================================================================================
=>  A constructor which has no arguments is called default constructor.
=>  It is the constructor which is automatically called when an object is created.
=>  It is defined with the __init__() method.

Syntax:
    def __init__(self):
        # body of the constructor

Example:
    class Student:
        def __init__(self):
            print("Default Constructor is called")
            
    s1 = Student()

Output:

    Default Constructor is called

======================================================================================================
2.2 Parameterized Constructor
======================================================================================================
=>  A constructor which has arguments is called parameterized constructor.
=>  It is used to assign values to the object properties when an object is created.
=>  It is defined with the __init__() method.

Syntax:
    def __init__(self, arg1, arg2, arg3, ...):
        # body of the constructor

Example:
    class Student:
        def __init__(self, name, rollno):
            self.name = name
            self.rollno = rollno
            
        def show(self):
            print("Name:", self.name)
            print("Roll No:", self.rollno)
            
    s1 = Student("John", 101)
    s1.show()

Output:
    Name: John
    Roll No: 101

Note:
    Most of the time, we use parameterized constructor.
    
======================================================================================================
3. whrere to use Python Constructor
======================================================================================================
=>  Constructor is used to initialize the object.
=>  It is used to assign values to the object properties when an object is created.
=>  It is called when an object is created.

======================================================================================================
4. why to use Python Constructor
======================================================================================================
=>  Constructor is used to initialize the object.
=>  It is used to assign values to the object properties when an object is created.
=>  It is called when an object is created.
=>  The main purpose of constructor is to initialize the object.
=>  initialize object means to assign values to the object properties when an object is created.

Example:
    class Student:
        def __init__(self, name, rollno):
            self.name = name
            self.rollno = rollno
            
        def show(self):
            print("Name:", self.name)
            print("Roll No:", self.rollno)
            
    s1 = Student("John", 101)
    s1.show()

Output:
    Name: John
    Roll No: 101

# here we are assigning values to the object properties name and rollno when an object is created.
# in which initializing the object(properties) is done by constructor.

======================================================================================================
5. what is benifit of Python Constructor
======================================================================================================
=>  The main purpose of constructor is to initialize the object.
=>  initialize object means to assign values to the object properties when an object is created.
=>  It is used to assign values to the object properties when an object is created.
=>  It is called when an object is created.
=>  It is used to initialize the object.

Example:
    class Student:
        def __init__(self, name, rollno):
            self.name = name
            self.rollno = rollno
            
        def show(self):
            print("Name:", self.name)
            print("Roll No:", self.rollno)
            
    s1 = Student("John", 101)
    s1.show()

Output:
    Name: John
    Roll No: 101

# here we are assigning values to the object properties name and rollno when an object is created.


======================================================================================================
6.  Python Constructor Overloading
======================================================================================================
=>  Constructor overloading is not possible in Python.
=>  If we define multiple constructors in the class, then the last constructor will be considered and the previous constructors will be overridden.

Example:
    class Student:
        def __init__(self):
            print("Default Constructor is called")
            
        def __init__(self, name, rollno):
            self.name = name
            self.rollno = rollno
            
        def show(self):
            print("Name:", self.name)
            print("Roll No:", self.rollno)
            
    s1 = Student("John", 101)
    s1.show()

Output:
    TypeError: __init__() takes 3 positional arguments but 4 were given

# here we are getting error because constructor overloading is not possible in Python.

======================================================================================================
7.  Python Constructor Overriding
======================================================================================================
=>  Constructor overriding is not possible in Python.
=>  If we define multiple constructors in the class, then the last constructor will be considered and the previous constructors will be overridden.

Example:
    class Student:
        def __init__(self):
            print("Default Constructor is called")
            
        def __init__(self, name, rollno):
            self.name = name
            self.rollno = rollno
            
        def show(self):
            print("Name:", self.name)
            print("Roll No:", self.rollno)
            
    s1 = Student("John", 101)
    s1.show()

Output:
    TypeError: __init__() takes 3 positional arguments but 4 were given

# here we are getting error because constructor overriding is not possible in Python.

======================================================================================================
8.  Python Constructor with Inheritance
======================================================================================================
=> Python Constructor with Inheritance is possible in Python.
=> If a class is inherited from another class, then the constructor of the parent class is not automatically called.
=> We need to call the constructor of the parent class explicitly(Using super() method).

Example:
    class Parent:
        def __init__(self):
            print("Parent Constructor is called")
            
    class Child(Parent):
        def __init__(self):
            super().__init__()      # calling the constructor of the parent class
            print("Child Constructor is called")
            
    c1 = Child()

Output:
    Parent Constructor is called
    Child Constructor is called

# here we are calling the constructor of the parent class explicitly using super() method.

======================================================================================================
9.  What is self in Python Constructor?
======================================================================================================

=>  self is a reference to the current instance of the class, and is used to access variables that belongs to the class.
=>  It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class.

Example:
    class Student:
        def __init__(self, name, rollno):
            self.name = name
            self.rollno = rollno
            
        def show(self):
            print("Name:", self.name)
            print("Roll No:", self.rollno)
            
    s1 = Student("John", 101)
    s1.show()

# what is meaning of instance?
=>  The meaning of instance is 