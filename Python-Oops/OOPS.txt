------------- Python OOps (object oriented programing )-------

-  It is most important concept :
- when we develop or design any SOF we Follow SDC principal
- SDC stand for (software development cycle) so for this 
- Best Approch/Practics we used OOPS 
- For every application (web,sof,ai app,etc..)
- main reason it is very fast real-life implementation


----------why we use OPPs ?
- 1- Reusability (code reuse)
- 2- Maintainability (easy to maintain)
- 3- Scalability (easy to scale) 
- 4- Security (secure code)
- 5- Flexibility (easy to change)
- 6- Understandability (easy to understand)
- 7- Testability (easy to test)
- 8- Performance (fast code)
- 9- Productivity (fast development)
- 10- Reliability (reliable code)
- 11- Modularity (easy to modularize)
- 12- Extensibility (easy to extend)
- 13- Encapsulation (secure code)
- 14- Abstraction (easy to abstract)
- 15- Polymorphism (easy to polymorph)
- 16- Inheritance (easy to inherit)

 
---------------------------------------------------------------------


- 4 Pillers of OPPs 
1- Encapsulation  (data hiding) python does not support data hiding but
 we can achieve it by using private variable(custome way)

2 - Inheritance 

3 - Polymorphism 

4 - abstraction 

---------------------------------------------------------------------

prerequest to implement above 4 piller you first knowledge
about
1- class 
2- object/instance
3- method /function
4- attribute /variable
5- constructor
6- destructor
7- class member

---------------------------------------------------------------------


-------------------------Class ---------------------------->
1 - class is a blueprint  of object
	-->>>blueprint ?
	- blueprint is a plan or design  or technical drawing
	- blueprint is a detailed plan of how to do something 
	- Example 
		- if you want to build a house, you need a blueprint to show you how to build it
		like sturcture of house, number of rooms, size of rooms, etc


2 - Class is templates of object
	-->>>templates ?
	- templates is a pre-designed layout used to create new pages with a similar design, pattern, or style
	- templates is a reusable pattern that you can use to lay out elements on a web page 
	- Example 
		- if you want to create a web page with a similar design, you can use a template to create a new page with the same design
		- if you want to create a new document with a similar layout, you can use a template to create a new document with the same layout

3 - Class is a collection of objects
	- class is a collection of objects(should be related to each other aarribute and method)
	-->>>collection of objects ?
	- collection of objects is a group of objects that are related to each other in some way
	- collection of objects is a group of objects that share similar attributes and methods
	- Example 
		- if you have a collection of cars, you can group them together based on their make, model, color, etc
		- if you have a collection of books, you can group them together based on their author, genre, price, etc

4 - Class is a user-defined data type that defines a set of attributes and methods


overLL class is a collection of object and object is a instance of class

Real-Life Example of Class:
- Class: Car
	- Attributes: make, model, year, color, price
	- Methods: start, stop, accelerate, brake
	- Objects: BMW, Audi, Mercedes, Toyota, Honda

- Class: Student
	- Attributes: name, roll number, age
	- Methods: study, sleep, eat, play
	- Objects: John, Mary, Alice, Bob, Tom

- Class: Employee
	- Attributes: name, employee ID, salary
	- Methods: work, rest, eat, sleep
	- Objects: Alice, Bob, Tom, Mary, John


# Class Definition
class ClassName:
	pass

# Object Creation
objectName = ClassName()

here is ClassName is name of class  is called class name
and objectName is name of object is called object name

type of class
1 - instance class/regular class/normal class
2 - abstract class/parent class
3 - partial class/sub class/child class
4 - static class/constant class
5 - field class/property class
6 - data class/value class/record class
7 - single term class/singleton class/one instance class
8 - meta class/parent class/

most used is
instance class
abstract class
data class
single term class
meta class

-------------------------Class ---------------------------->



-------------------------Object ---------------------------->

1 - object is a instance of class
	-->>>instance of class ?
	- instance of class is a specific object that is created from a class
	- instance of class is a unique object that has its own set of attributes and methods
	- Example 
		- if you have a class called Car, you can create an instance of that class called BMW
		- if you have a class called Student, you can create an instance of that class called John

2 - object is a real-world entity
	-->>>real-world entity ?
	- real-world entity is an object that exists in the real world
	- real-world entity is a physical or conceptual object that can be represented in software
	- Example 
		- if you have a class called Car, you can create an object called BMW that represents a real car
		- if you have a class called Student, you can create an object called John that represents a real student

3 - object is a runtime entity
	-->>>runtime entity ?
	- runtime entity is an object that exists at runtime
	- runtime entity is an object that is created and destroyed during the execution of a program
	- Example 
		- if you have a class called Car, you can create an object called BMW at runtime
		- if you have a class called Student, you can create an object called John at runtime

4 - object is a collection of attributes and methods
	-->>>collection of attributes and methods ?
	- collection of attributes and methods is a group of variables and functions that are related to each other
	- collection of attributes and methods is a set of data and behavior that defines an object
	- Example 
		- if you have an object called BMW, you can have attributes like make, model, year, color, price
		- if you have an object called John, you can have attributes like name, roll number, age

5 - object is a user-defined data type that is created from a class


Real-Life Example of Object:
- Class: Car
	- Object: BMW
		- Attributes: make = BMW, model = X5, year = 2022, color = black, price = $50,000
		- Methods: start, stop, accelerate, brake

- Class: Student 
	- Object: John
		- Attributes: name = John, roll number = 101, age = 20
		- Methods: study, sleep, eat, play
		

---- it depends on obeject taht waht type of become a class
like i have a marker 
 -- its method/functionality/behavoir is WRITTIENG 
-- its attribute/char is color ,quality,barnd,price etc 


-------------------------instance ---------------------------
if the object is part of sepacific class then it is called instance 

- if it is independent then it called object 
- if it is dependent  with any class then it called instance 

 - when we create object /creation of object it is called 
- instansiation
 
-----------------when we design softwae ---
1 - we o modling (UML) 
    we create forst unified modling languge like crate daigram
	befor this we other daigram (ERD,Class ,sequence daigram)

- when we talk about OPPs 2 daigram is most IMP
1 - object daigram (mostly not used )
2 - calss daigram (mostly used )


----------how to define 
basically aarribute is varible 
and method is function 

but when define variable inside in classe it called attribute 
becase now it become part of object 

it is also called global variable 
 
if we difine outside the class it called local variable 

---------------------------Type of class ---
1 - intance class/regular class 
2 -  abstaracy class
3 - partial calss (used other languge)
4 - static class 
5 - field class 
6  - data class (only in python )
7 - single termn class (only one instance )
8 - meta class 

most used is 
instance class
abstract  class  
data class  
single class 
meta class 

-----------type of attribute 
1- instance attribute 
 2 - class attribute 
there other type of attribute 
but in python used only these 2 

----------------class memeber 

first member we define  attribute

second member method 
instance method 
magic method (special method/turnel method)
static method 
class methd
abstract method 

we can defie insde with in class that is 3rd member 
but not used 


we can make constructor baseed on magic method 

python constructor is built in magic method 
__init__() = innitilaizer 
 maen 
consturctor purpose  to allocate memory in heap for all class member in run time

construct call atuomatically  when  object is called 


distructor  purpose to de allocate all run time memeory 
 

2 major functionality in oops 
 extend(futher extence/increment)
overriding  (replace )


overloading 
basically both are type of polymorphism 
1 overloading(static polymorphisom) 
2 overriding(dynamic polymorphism)

if one things change your behavior in run time that is called  overriding 


if one things change your behavior on complie time that is called  overloading 



----------------------------------class----------------------

Class should be in PasscalCase  (word firts it capital )

class Product:
	pass

p1 = Product() 		# oblect creation or instantiation 

# here is p1 is name of object and object is Product() 



#----------------------------------









 
